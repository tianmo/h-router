// Generated by CoffeeScript 1.7.1
var Router;

Router = (function() {
  function Router() {
    this.stack = [];
    this.funcs = {};
    this.routers = {};
  }

  Router.prototype.use = function(route, fn) {
    if ('function' === typeof route) {
      fn = route;
      route = '/';
    }
    this.stack.push({
      route: route,
      handle: fn
    });
    return this.compile();
  };

  Router.prototype.unuse = function(route) {
    var i, newStack, router, _i, _len, _ref;
    newStack = [];
    _ref = this.stack;
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      router = _ref[i];
      if (router.route !== route) {
        newStack.push(router);
      }
    }
    return this.stack = newStack;
  };

  Router.prototype.registFunc = function(route, fn) {
    if ('function' === typeof route) {
      fn = route;
      route = '/';
    }
    this.unuse(route);
    return this.funcs[route] = fn;
  };

  Router.prototype.unRegist = function(route) {
    this.unuse(route);
    if (this.funcs[route]) {
      delete this.funcs[route];
    }
    return this.compile();
  };

  Router.prototype.compile = function() {
    var fn, fns, handle, middlewares, parent, parentHandles, path, rootHandles, route, routers, routes, _i, _j, _len, _len1, _ref, _ref1, _ref2;
    middlewares = {};
    routers = {};
    _ref = this.stack;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      _ref1 = _ref[_i], route = _ref1.route, handle = _ref1.handle;
      if (!middlewares[route]) {
        middlewares[route] = [];
      }
      middlewares[route].push(handle);
    }
    rootHandles = middlewares['/'] || [];
    _ref2 = this.funcs;
    for (path in _ref2) {
      fn = _ref2[path];
      fns = rootHandles;
      routes = path.split('/');
      routes.shift();
      parent = '';
      for (_j = 0, _len1 = routes.length; _j < _len1; _j++) {
        route = routes[_j];
        if (!route) {
          continue;
        }
        parent = "" + parent + "/" + route;
        parentHandles = middlewares[parent];
        if (!parentHandles) {
          continue;
        }
        fns = fns.concat(parentHandles);
      }
      fns = fns.concat(fn);
      routers[path] = fns;
    }
    return this.routers = routers;
  };

  Router.prototype.handle = function() {
    return (function(_this) {
      return function(req, res) {
        var path, pathlength, routers, search, url;
        url = req.url;
        search = 1 + url.indexOf('?');
        pathlength = search ? search - 1 : url.length;
        path = url.substr(0, pathlength);
        req.originalUrl = url;
        routers = _this.routers[path];
        if (routers) {
          req.url = '';
          _this.execMws(req, res, routers);
          return;
        }
        return _this.execStack(req, res, path);
      };
    })(this);
  };

  Router.prototype.execMws = function(req, res, routers) {
    var index, next;
    index = 0;
    next = (function(_this) {
      return function() {
        var router;
        router = routers[index++];
        if (res.headersSent) {
          return;
        }
        if (!router) {
          return;
        }
        return router(req, res, next.bind(_this));
      };
    })(this);
    return next();
  };

  Router.prototype.execStack = function(req, res, path) {
    var handles, parent, route, routers, routes, stack, url, _i, _len;
    routers = this.routers;
    routes = path.split('/');
    routes.shift();
    parent = '';
    url = '/';
    stack = routers['/'] || [];
    for (_i = 0, _len = routes.length; _i < _len; _i++) {
      route = routes[_i];
      parent = "" + parent + "/" + route;
      handles = routers[parent];
      if (handles) {
        stack = handles;
        url = parent;
      }
    }
    req.url = path.substr(url.length);
    return this.execMws(req, res, stack);
  };

  return Router;

})();

module.exports = function() {
  return new Router;
};
